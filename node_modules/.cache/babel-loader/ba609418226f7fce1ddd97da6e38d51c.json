{"ast":null,"code":"var _jsxFileName = \"/home/v2stech/ReactJs/RouterAssignment (copy)/src/components/FormValidation/FormValidation.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { Form, Button, Container } from \"react-bootstrap\";\nimport { Formik, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport { Fragment } from \"react\";\nimport { useFormik } from \"formik\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst phoneRegExp = /^(\\+?\\d{0,4})?\\s?-?\\s?(\\(?\\d{3}\\)?)\\s?-?\\s?(\\(?\\d{3}\\)?)\\s?-?\\s?(\\(?\\d{4}\\)?)?$/;\nconst validationSchema = Yup.object().shape({\n  name: Yup.string().min(2, \"*Names must have at least 2 characters\").max(100, \"*Names can't be longer than 100 characters\").required(\"*Name is required\"),\n  email: Yup.string().email(\"*Must be a valid email address\").max(100, \"*Email must be less than 100 characters\").required(\"*Email is required\"),\n  phone: Yup.string().matches(phoneRegExp, \"*Phone number is not valid\").required(\"*Phone number required\"),\n  blog: Yup.string().url(\"*Must enter URL in http://www.example.com format\").required(\"*URL required\"),\n  password: Yup.string().min(6, \"Password must be at least 6 characters\").required(\"Password is required\"),\n  confirmPassword: Yup.string().oneOf([Yup.ref(\"password\"), null], \"Passwords must match\").required(\"Confirm Password is required\")\n});\n\nconst FormValidation = () => {\n  _s();\n\n  const formik = useFormik({\n    initialValues: {\n      name: \"\",\n      email: \"\",\n      phone: \"\",\n      blog: \"\"\n    },\n    validationSchema: {\n      validationSchema\n    },\n    onSubmit: (values, {\n      setSubmitting,\n      resetForm\n    }) => {\n      // When button submits form and form is in the process of submitting, submit button is disabled\n      setSubmitting(true); // Simulate submitting to database, shows us values submitted, resets form\n\n      setTimeout(() => {\n        alert(JSON.stringify(values, null, 2));\n        resetForm({});\n        setSubmitting(false);\n      }, 500);\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      fluid: true,\n      style: {\n        padding: \"30px\",\n        paddingTop: \"0px\",\n        paddingBottom: \"15px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: formik.handleSubmit,\n        className: \"mx-auto\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"formName\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Name :\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"text\",\n            name: \"name\",\n            placeholder: \"Full Name\",\n            onChange: formik.handleChange,\n            onBlur: formik.handleBlur,\n            value: formik.values.name,\n            isInvalid: formik.touched.name && formik.errors.name,\n            isValid: formik.touched.name && !formik.errors.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n            type: \"invalid\",\n            children: formik.errors.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          type: \"submit\",\n          disabled: formik.isSubmitting,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n\n_s(FormValidation, \"B/4rI4IXClQ7sG7psKj+pOuRe5Q=\", false, function () {\n  return [useFormik];\n});\n\n_c = FormValidation;\nexport default FormValidation;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormValidation\");","map":{"version":3,"sources":["/home/v2stech/ReactJs/RouterAssignment (copy)/src/components/FormValidation/FormValidation.js"],"names":["React","Form","Button","Container","Formik","ErrorMessage","Yup","Fragment","useFormik","phoneRegExp","validationSchema","object","shape","name","string","min","max","required","email","phone","matches","blog","url","password","confirmPassword","oneOf","ref","FormValidation","formik","initialValues","onSubmit","values","setSubmitting","resetForm","setTimeout","alert","JSON","stringify","padding","paddingTop","paddingBottom","handleSubmit","handleChange","handleBlur","touched","errors","isSubmitting"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Form, Button, Container } from \"react-bootstrap\";\nimport { Formik, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport { Fragment } from \"react\";\nimport { useFormik } from \"formik\";\nconst phoneRegExp =\n  /^(\\+?\\d{0,4})?\\s?-?\\s?(\\(?\\d{3}\\)?)\\s?-?\\s?(\\(?\\d{3}\\)?)\\s?-?\\s?(\\(?\\d{4}\\)?)?$/;\n\nconst validationSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(2, \"*Names must have at least 2 characters\")\n    .max(100, \"*Names can't be longer than 100 characters\")\n    .required(\"*Name is required\"),\n  email: Yup.string()\n    .email(\"*Must be a valid email address\")\n    .max(100, \"*Email must be less than 100 characters\")\n    .required(\"*Email is required\"),\n  phone: Yup.string()\n    .matches(phoneRegExp, \"*Phone number is not valid\")\n    .required(\"*Phone number required\"),\n  blog: Yup.string()\n    .url(\"*Must enter URL in http://www.example.com format\")\n    .required(\"*URL required\"),\n  password: Yup.string()\n    .min(6, \"Password must be at least 6 characters\")\n    .required(\"Password is required\"),\n  confirmPassword: Yup.string()\n    .oneOf([Yup.ref(\"password\"), null], \"Passwords must match\")\n    .required(\"Confirm Password is required\"),\n});\n\nconst FormValidation = () => {\n  const formik = useFormik({\n    initialValues: { name: \"\", email: \"\", phone: \"\", blog: \"\" },\n    validationSchema: { validationSchema },\n    onSubmit: (values, { setSubmitting, resetForm }) => {\n      // When button submits form and form is in the process of submitting, submit button is disabled\n      setSubmitting(true);\n\n      // Simulate submitting to database, shows us values submitted, resets form\n      setTimeout(() => {\n        alert(JSON.stringify(values, null, 2));\n        resetForm({});\n        setSubmitting(false);\n      }, 500);\n    },\n  });\n  return (\n    <Fragment>\n      <Container\n        fluid\n        style={{\n          padding: \"30px\",\n          paddingTop: \"0px\",\n          paddingBottom: \"15px\",\n        }}\n      >\n        <Form onSubmit={formik.handleSubmit} className=\"mx-auto\">\n          <Form.Group controlId=\"formName\">\n            <Form.Label>Name :</Form.Label>\n            <Form.Control\n              type=\"text\"\n              name=\"name\"\n              placeholder=\"Full Name\"\n              onChange={formik.handleChange}\n              onBlur={formik.handleBlur}\n              value={formik.values.name}\n              isInvalid={formik.touched.name && formik.errors.name}\n              isValid={formik.touched.name && !formik.errors.name}\n            />\n\n            <Form.Control.Feedback type=\"invalid\">\n              {formik.errors.name}\n            </Form.Control.Feedback>\n          </Form.Group>\n          {/*Submit button that is disabled after button is clicked/form is in the process of submitting*/}\n          <Button\n            variant=\"primary\"\n            type=\"submit\"\n            disabled={formik.isSubmitting}\n          >\n            Submit\n          </Button>\n        </Form>\n      </Container>\n    </Fragment>\n  );\n};\n\nexport default FormValidation;\n"]},"metadata":{},"sourceType":"module"}