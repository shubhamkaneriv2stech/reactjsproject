{"ast":null,"code":"var _jsxFileName = \"/home/v2stech/ReactJs/RouterAssignment/src/components/weatherapi/WeatherApi.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport DisplayCard from \"./DisplayCard\";\nimport { WEATHER_API_KEY } from \"../GlobalConstants/ApiKeys\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport { useSelector } from \"react-redux\";\nimport { fetchProducts } from \"../countdown/Actions/index\";\nimport { useDispatch } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst WeatherApi = () => {\n  _s();\n\n  const products = useSelector(state => state.productsReducer);\n  console.log(products, \" api calling\");\n  console.log(\" api calling\");\n  const dispatch = useDispatch();\n  useEffect(() => {\n    fetchProducts();\n  }, []); //State For Storing Weather Api  data\n\n  const [weatherDetails, setWeatherDetails] = useState(null); // State For the Loader Part\n\n  const [loader, setLoader] = useState(false); //State for the ErrorMsg When Something Wrong In Fetching Api Data\n\n  const [errorMsg, setErrorMsg] = useState(null); //Declaration of City Name\n\n  let city = \"Latur\"; //Declaration of Country Name\n\n  let country = \"India\"; //Declaration of Unit Name\n\n  let units = \"metric\"; //Declaration of APi URL\n\n  let apiUrl = `https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${WEATHER_API_KEY}&units=${units}`; // // Used for All Clean up When Component is Unmounted  And mounted\n  // useEffect(() => {\n  //   let mounted = true;\n  //   //Function For Getting Api Data And Setting in WeatherDetails State\n  //   const fetchWeather = () => {\n  //     axios\n  //       .get(apiUrl)\n  //       .then(function (response) {\n  //         if (mounted) {\n  //           setWeatherDetails(response);\n  //           // console.log(response);\n  //           setLoader(false);\n  //         }\n  //       })\n  //       .catch(function (error) {\n  //         // handle error\n  //         //   console.log(error);\n  //         setErrorMsg(\"Data Not Available\");\n  //         setLoader(false);\n  //       });\n  //   };\n  //   fetchWeather();\n  //   return function cleanup() {\n  //     mounted = false;\n  //   };\n  // }, []);\n  //Checking Whether data Set or Not\n  //   console.log(weatherDetails);\n  // Returning Statement\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center\",\n      children: [\" \", errorMsg]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), loader ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          padding: \"200px\",\n          color: \"red\",\n          textAlign: \"center\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(CircularProgress, {\n          color: \"secondary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Loading Data Please wait...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this)\n    }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: weatherDetails && /*#__PURE__*/_jsxDEV(DisplayCard, {\n        data: weatherDetails\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 30\n      }, this)\n    }, void 0, false)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n\n_s(WeatherApi, \"ldYI3BXxrsWWGDIOoK0CJG+rPRI=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = WeatherApi;\nexport default WeatherApi;\n\nvar _c;\n\n$RefreshReg$(_c, \"WeatherApi\");","map":{"version":3,"sources":["/home/v2stech/ReactJs/RouterAssignment/src/components/weatherapi/WeatherApi.js"],"names":["useEffect","useState","axios","DisplayCard","WEATHER_API_KEY","CircularProgress","useSelector","fetchProducts","useDispatch","WeatherApi","products","state","productsReducer","console","log","dispatch","weatherDetails","setWeatherDetails","loader","setLoader","errorMsg","setErrorMsg","city","country","units","apiUrl","padding","color","textAlign"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAASC,eAAT,QAAgC,4BAAhC;AACA,OAAOC,gBAAP,MAA6B,oCAA7B;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,aAAT,QAA8B,4BAA9B;AACA,SAASC,WAAT,QAA4B,aAA5B;;;;AACA,MAAMC,UAAU,GAAG,MAAM;AAAA;;AACvB,QAAMC,QAAQ,GAAGJ,WAAW,CAAEK,KAAD,IAAWA,KAAK,CAACC,eAAlB,CAA5B;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ,EAAsB,cAAtB;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACA,QAAMC,QAAQ,GAAGP,WAAW,EAA5B;AAEAR,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,aAAa;AACd,GAFQ,EAEN,EAFM,CAAT,CAPuB,CAUvB;;AACA,QAAM,CAACS,cAAD,EAAiBC,iBAAjB,IAAsChB,QAAQ,CAAC,IAAD,CAApD,CAXuB,CAYvB;;AACA,QAAM,CAACiB,MAAD,EAASC,SAAT,IAAsBlB,QAAQ,CAAC,KAAD,CAApC,CAbuB,CAcvB;;AACA,QAAM,CAACmB,QAAD,EAAWC,WAAX,IAA0BpB,QAAQ,CAAC,IAAD,CAAxC,CAfuB,CAiBvB;;AACA,MAAIqB,IAAI,GAAG,OAAX,CAlBuB,CAmBvB;;AACA,MAAIC,OAAO,GAAG,OAAd,CApBuB,CAqBvB;;AACA,MAAIC,KAAK,GAAG,QAAZ,CAtBuB,CAuBvB;;AACA,MAAIC,MAAM,GAAI,qDAAoDH,IAAK,IAAGC,OAAQ,UAASnB,eAAgB,UAASoB,KAAM,EAA1H,CAxBuB,CA0BvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;AACA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,sBAA+BJ,QAA/B;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEGF,MAAM,gBACL;AAAA,6BACE;AACE,QAAA,KAAK,EAAE;AACLQ,UAAAA,OAAO,EAAE,OADJ;AAELC,UAAAA,KAAK,EAAE,KAFF;AAGLC,UAAAA,SAAS,EAAE;AAHN,SADT;AAAA,gCAOE,QAAC,gBAAD;AAAkB,UAAA,KAAK,EAAC;AAAxB;AAAA;AAAA;AAAA;AAAA,gBAPF,eAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBARF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,qBADK,gBAcL;AAAA,gBAAGZ,cAAc,iBAAI,QAAC,WAAD;AAAa,QAAA,IAAI,EAAEA;AAAnB;AAAA;AAAA;AAAA;AAAA;AAArB,qBAhBJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAqBD,CA9ED;;GAAMP,U;UACaH,W,EAIAE,W;;;KALbC,U;AAgFN,eAAeA,UAAf","sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport DisplayCard from \"./DisplayCard\";\r\nimport { WEATHER_API_KEY } from \"../GlobalConstants/ApiKeys\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { fetchProducts } from \"../countdown/Actions/index\";\r\nimport { useDispatch } from \"react-redux\";\r\nconst WeatherApi = () => {\r\n  const products = useSelector((state) => state.productsReducer);\r\n\r\n  console.log(products, \" api calling\");\r\n  console.log(\" api calling\");\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    fetchProducts();\r\n  }, []);\r\n  //State For Storing Weather Api  data\r\n  const [weatherDetails, setWeatherDetails] = useState(null);\r\n  // State For the Loader Part\r\n  const [loader, setLoader] = useState(false);\r\n  //State for the ErrorMsg When Something Wrong In Fetching Api Data\r\n  const [errorMsg, setErrorMsg] = useState(null);\r\n\r\n  //Declaration of City Name\r\n  let city = \"Latur\";\r\n  //Declaration of Country Name\r\n  let country = \"India\";\r\n  //Declaration of Unit Name\r\n  let units = \"metric\";\r\n  //Declaration of APi URL\r\n  let apiUrl = `https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${WEATHER_API_KEY}&units=${units}`;\r\n\r\n  // // Used for All Clean up When Component is Unmounted  And mounted\r\n  // useEffect(() => {\r\n  //   let mounted = true;\r\n  //   //Function For Getting Api Data And Setting in WeatherDetails State\r\n  //   const fetchWeather = () => {\r\n  //     axios\r\n  //       .get(apiUrl)\r\n  //       .then(function (response) {\r\n  //         if (mounted) {\r\n  //           setWeatherDetails(response);\r\n  //           // console.log(response);\r\n  //           setLoader(false);\r\n  //         }\r\n  //       })\r\n  //       .catch(function (error) {\r\n  //         // handle error\r\n  //         //   console.log(error);\r\n  //         setErrorMsg(\"Data Not Available\");\r\n  //         setLoader(false);\r\n  //       });\r\n  //   };\r\n  //   fetchWeather();\r\n  //   return function cleanup() {\r\n  //     mounted = false;\r\n  //   };\r\n  // }, []);\r\n\r\n  //Checking Whether data Set or Not\r\n  //   console.log(weatherDetails);\r\n\r\n  // Returning Statement\r\n  return (\r\n    <div className=\"app\">\r\n      <div className=\"text-center\"> {errorMsg}</div>\r\n      {loader ? (\r\n        <>\r\n          <div\r\n            style={{\r\n              padding: \"200px\",\r\n              color: \"red\",\r\n              textAlign: \"center\",\r\n            }}\r\n          >\r\n            <CircularProgress color=\"secondary\" />\r\n            <h1>Loading Data Please wait...</h1>\r\n          </div>\r\n        </>\r\n      ) : (\r\n        <>{weatherDetails && <DisplayCard data={weatherDetails} />}</>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherApi;\r\n"]},"metadata":{},"sourceType":"module"}