{"ast":null,"code":"var _jsxFileName = \"/home/v2stech/ReactJs/RouterAssignment (copy)/src/components/FormValidation/FormValidation.js\";\nimport React, { useState } from \"react\";\nimport { Form, Button, Container } from \"react-bootstrap\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { Fragment } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst pinCodeRegExp = /^[1-9][0-9]*$/;\nconst passwordRegExp = /^(?=.*\\d)(?=.*[A-Z])(?=.*[a-z])(?=.*[a-zA-Z!#$%&?@ \"])[a-zA-Z0-9!#$%&?@]{8,20}$/;\nconst validationSchema = Yup.object().shape({\n  firstName: Yup.string().min(2, \"*First Name must have at least 2 characters\").max(100, \"*First Name can't be longer than 100 characters\").required(\"*First Name is required\"),\n  lastName: Yup.string().min(2, \"*Last Name must have at least 2 characters\").max(100, \"*Last Name can't be longer than 100 characters\").required(\"*Last Name is required\"),\n  email: Yup.string().email(\"*Must be a valid email address\").max(100, \"*Email must be less than 100 characters\").required(\"*Email is required\"),\n  city: Yup.string().min(2, \"*City Name must have at least 2 characters\").max(100, \"*City Name can't be longer than 100 characters\").required(\"*City Name is required\"),\n  state: Yup.string().min(2, \"*State Name must have at least 2 characters\").max(100, \"*State Name can't be longer than 100 characters\").required(\"*State Name is required\"),\n  zip: Yup.string(\"Must be number\").min(6, \"*Pincode must be 6 digit\").max(6, \"*Pincode must be 6 digit\").required(\"*Zip Code  is required\").matches(pinCodeRegExp, \" Must be Positive Number\"),\n  password: Yup.string().required(\"*Password  is required\").matches(passwordRegExp, \"Password min be 8 Character,Password max be 20 Character,At least one uppercase character ,At least one lowercase character ,At least one digit ,At least one special character  \")\n});\n\nconst FormValidation = () => {\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      fluid: true,\n      style: {\n        padding: \"30px\",\n        paddingTop: \"0px\",\n        paddingBottom: \"15px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Formik, {\n        initialValues: {\n          firstName: \"\",\n          lastName: \"\",\n          email: \"\",\n          city: \"\",\n          state: \"\",\n          zip: \"\",\n          password: \"\"\n        },\n        validationSchema: validationSchema,\n        onSubmit: (values, {\n          setSubmitting,\n          resetForm\n        }) => {\n          // When button submits form and form is in the process of submitting, submit button is disabled\n          setSubmitting(true); // Simulate submitting to database, shows us values submitted, resets form\n\n          setTimeout(() => {\n            alert(\" Data is submitted successfully\");\n            console.log(values);\n            resetForm();\n            setSubmitting(false);\n          }, 1000);\n        },\n        children: ({\n          values,\n          errors,\n          touched,\n          handleChange,\n          handleBlur,\n          handleSubmit,\n          isSubmitting\n        }) => /*#__PURE__*/_jsxDEV(Form, {\n          onSubmit: handleSubmit,\n          className: \"mx-auto\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"firstName\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \" First name :\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"text\",\n              name: \"firstName\",\n              placeholder: \"First Name\",\n              onChange: handleChange,\n              onBlur: handleBlur,\n              value: values.firstName,\n              isInvalid: touched.firstName && errors.firstName,\n              isValid: touched.firstName && !errors.firstName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n              type: \"invalid\",\n              children: errors.firstName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"lastName\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \" Last name :\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"text\",\n              name: \"lastName\",\n              placeholder: \"Last Name\",\n              onChange: handleChange,\n              onBlur: handleBlur,\n              value: values.lastName,\n              isInvalid: touched.lastName && errors.lastName,\n              isValid: touched.lastName && !errors.lastName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n              type: \"invalid\",\n              children: errors.lastName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"password\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \" Password :\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"text\",\n              name: \"password\",\n              placeholder: \"Password\",\n              onChange: handleChange,\n              onBlur: handleBlur,\n              value: values.password,\n              isInvalid: touched.password && errors.password,\n              isValid: touched.password && !errors.password\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n              type: \"invalid\",\n              children: errors.password\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"email\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \" Email :\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"email\",\n              name: \"email\",\n              placeholder: \"Email\",\n              onChange: handleChange,\n              onBlur: handleBlur,\n              value: values.email,\n              isInvalid: touched.email && errors.email,\n              isValid: touched.email && !errors.email\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n              type: \"invalid\",\n              children: errors.email\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"city\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \" City :\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"text\",\n              name: \"city\",\n              placeholder: \"City\",\n              onChange: handleChange,\n              onBlur: handleBlur,\n              value: values.city,\n              isInvalid: touched.city && errors.city,\n              isValid: touched.city && !errors.city\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n              type: \"invalid\",\n              children: errors.city\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"state\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \" State :\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"text\",\n              name: \"state\",\n              placeholder: \"State\",\n              onChange: handleChange,\n              onBlur: handleBlur,\n              value: values.state,\n              isInvalid: touched.state && errors.state,\n              isValid: touched.state && !errors.state\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n              type: \"invalid\",\n              children: errors.state\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 193,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"zip\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \" Zip :\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"text\",\n              name: \"zip\",\n              placeholder: \"Zip Code\",\n              onChange: handleChange,\n              onBlur: handleBlur,\n              value: values.zip,\n              isInvalid: touched.zip && errors.zip,\n              isValid: touched.zip && !errors.zip\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n              type: \"invalid\",\n              children: errors.zip\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"primary\",\n            type: \"submit\",\n            className: \"mt-5\",\n            disabled: isSubmitting,\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n\n_c = FormValidation;\nexport default FormValidation;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormValidation\");","map":{"version":3,"sources":["/home/v2stech/ReactJs/RouterAssignment (copy)/src/components/FormValidation/FormValidation.js"],"names":["React","useState","Form","Button","Container","Formik","Yup","Fragment","pinCodeRegExp","passwordRegExp","validationSchema","object","shape","firstName","string","min","max","required","lastName","email","city","state","zip","matches","password","FormValidation","padding","paddingTop","paddingBottom","values","setSubmitting","resetForm","setTimeout","alert","console","log","errors","touched","handleChange","handleBlur","handleSubmit","isSubmitting"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Form, Button, Container } from \"react-bootstrap\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { Fragment } from \"react\";\n\nconst pinCodeRegExp = /^[1-9][0-9]*$/;\n\nconst passwordRegExp =\n  /^(?=.*\\d)(?=.*[A-Z])(?=.*[a-z])(?=.*[a-zA-Z!#$%&?@ \"])[a-zA-Z0-9!#$%&?@]{8,20}$/;\nconst validationSchema = Yup.object().shape({\n  firstName: Yup.string()\n    .min(2, \"*First Name must have at least 2 characters\")\n    .max(100, \"*First Name can't be longer than 100 characters\")\n    .required(\"*First Name is required\"),\n  lastName: Yup.string()\n    .min(2, \"*Last Name must have at least 2 characters\")\n    .max(100, \"*Last Name can't be longer than 100 characters\")\n    .required(\"*Last Name is required\"),\n  email: Yup.string()\n    .email(\"*Must be a valid email address\")\n    .max(100, \"*Email must be less than 100 characters\")\n    .required(\"*Email is required\"),\n  city: Yup.string()\n    .min(2, \"*City Name must have at least 2 characters\")\n    .max(100, \"*City Name can't be longer than 100 characters\")\n    .required(\"*City Name is required\"),\n  state: Yup.string()\n    .min(2, \"*State Name must have at least 2 characters\")\n    .max(100, \"*State Name can't be longer than 100 characters\")\n    .required(\"*State Name is required\"),\n  zip: Yup.string(\"Must be number\")\n    .min(6, \"*Pincode must be 6 digit\")\n    .max(6, \"*Pincode must be 6 digit\")\n    .required(\"*Zip Code  is required\")\n    .matches(pinCodeRegExp, \" Must be Positive Number\"),\n  password: Yup.string()\n    .required(\"*Password  is required\")\n    .matches(\n      passwordRegExp,\n      \"Password min be 8 Character,Password max be 20 Character,At least one uppercase character ,At least one lowercase character ,At least one digit ,At least one special character  \"\n    ),\n});\nconst FormValidation = () => {\n  return (\n    <Fragment>\n      <Container\n        fluid\n        style={{\n          padding: \"30px\",\n          paddingTop: \"0px\",\n          paddingBottom: \"15px\",\n        }}\n      >\n        <Formik\n          initialValues={{\n            firstName: \"\",\n            lastName: \"\",\n            email: \"\",\n            city: \"\",\n            state: \"\",\n            zip: \"\",\n            password: \"\",\n          }}\n          validationSchema={validationSchema}\n          onSubmit={(values, { setSubmitting, resetForm }) => {\n            // When button submits form and form is in the process of submitting, submit button is disabled\n            setSubmitting(true);\n\n            // Simulate submitting to database, shows us values submitted, resets form\n            setTimeout(() => {\n              alert(\" Data is submitted successfully\");\n              console.log(values);\n\n              resetForm();\n              setSubmitting(false);\n            }, 1000);\n          }}\n        >\n          {({\n            values,\n            errors,\n            touched,\n            handleChange,\n            handleBlur,\n            handleSubmit,\n            isSubmitting,\n          }) => (\n            <Form onSubmit={handleSubmit} className=\"mx-auto\">\n              {/*First Name input Field*/}\n              <Form.Group controlId=\"firstName\">\n                <Form.Label> First name :</Form.Label>\n                <Form.Control\n                  type=\"text\"\n                  name=\"firstName\"\n                  placeholder=\"First Name\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.firstName}\n                  isInvalid={touched.firstName && errors.firstName}\n                  isValid={touched.firstName && !errors.firstName}\n                />\n\n                <Form.Control.Feedback type=\"invalid\">\n                  {errors.firstName}\n                </Form.Control.Feedback>\n              </Form.Group>\n              {/*Last Name input Field*/}\n              <Form.Group controlId=\"lastName\">\n                <Form.Label> Last name :</Form.Label>\n                <Form.Control\n                  type=\"text\"\n                  name=\"lastName\"\n                  placeholder=\"Last Name\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.lastName}\n                  isInvalid={touched.lastName && errors.lastName}\n                  isValid={touched.lastName && !errors.lastName}\n                />\n                <Form.Control.Feedback type=\"invalid\">\n                  {errors.lastName}\n                </Form.Control.Feedback>\n              </Form.Group>\n\n              {/*Password input Field*/}\n              <Form.Group controlId=\"password\">\n                <Form.Label> Password :</Form.Label>\n                <Form.Control\n                  type=\"text\"\n                  name=\"password\"\n                  placeholder=\"Password\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.password}\n                  isInvalid={touched.password && errors.password}\n                  isValid={touched.password && !errors.password}\n                />\n                <Form.Control.Feedback type=\"invalid\">\n                  {errors.password}\n                </Form.Control.Feedback>\n              </Form.Group>\n\n              {/*Email input Field*/}\n              <Form.Group controlId=\"email\">\n                <Form.Label> Email :</Form.Label>\n                <Form.Control\n                  type=\"email\"\n                  name=\"email\"\n                  placeholder=\"Email\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.email}\n                  isInvalid={touched.email && errors.email}\n                  isValid={touched.email && !errors.email}\n                />\n                <Form.Control.Feedback type=\"invalid\">\n                  {errors.email}\n                </Form.Control.Feedback>\n              </Form.Group>\n\n              {/*City input Field*/}\n              <Form.Group controlId=\"city\">\n                <Form.Label> City :</Form.Label>\n                <Form.Control\n                  type=\"text\"\n                  name=\"city\"\n                  placeholder=\"City\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.city}\n                  isInvalid={touched.city && errors.city}\n                  isValid={touched.city && !errors.city}\n                />\n                <Form.Control.Feedback type=\"invalid\">\n                  {errors.city}\n                </Form.Control.Feedback>\n              </Form.Group>\n\n              {/*State input Field*/}\n              <Form.Group controlId=\"state\">\n                <Form.Label> State :</Form.Label>\n                <Form.Control\n                  type=\"text\"\n                  name=\"state\"\n                  placeholder=\"State\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.state}\n                  isInvalid={touched.state && errors.state}\n                  isValid={touched.state && !errors.state}\n                />\n                <Form.Control.Feedback type=\"invalid\">\n                  {errors.state}\n                </Form.Control.Feedback>\n              </Form.Group>\n\n              {/*Zip input Field*/}\n              <Form.Group controlId=\"zip\">\n                <Form.Label> Zip :</Form.Label>\n                <Form.Control\n                  type=\"text\"\n                  name=\"zip\"\n                  placeholder=\"Zip Code\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.zip}\n                  isInvalid={touched.zip && errors.zip}\n                  isValid={touched.zip && !errors.zip}\n                />\n                <Form.Control.Feedback type=\"invalid\">\n                  {errors.zip}\n                </Form.Control.Feedback>\n              </Form.Group>\n\n              {/*Submit button that is disabled after button is clicked/form is in the process of submitting*/}\n              <Button\n                variant=\"primary\"\n                type=\"submit\"\n                className=\"mt-5\"\n                disabled={isSubmitting}\n              >\n                Submit\n              </Button>\n            </Form>\n          )}\n        </Formik>\n      </Container>\n    </Fragment>\n  );\n};\n\nexport default FormValidation;\n"]},"metadata":{},"sourceType":"module"}