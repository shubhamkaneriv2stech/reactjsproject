{"ast":null,"code":"import _slicedToArray from\"/home/v2stech/ReactJs/RouterAssignment (copy)/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useEffect,useState}from\"react\";import axios from\"axios\";import DisplayCard from\"./DisplayCard\";import{WEATHER_API_KEY}from\"../GlobalConstants/ApiKeys\";import CircularProgress from\"@material-ui/core/CircularProgress\";import{useSelector}from\"react-redux\";import{Fragment}from\"react\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";var WeatherApi=function WeatherApi(){var weatherApiData=useSelector(function(state){return state.weatherApiReducer;});console.log(weatherApiData,\" api calling\");console.log(\" api calling\");//State For Storing Weather Api  data\nvar _useState=useState(null),_useState2=_slicedToArray(_useState,2),weatherDetails=_useState2[0],setWeatherDetails=_useState2[1];// State For the Loader Part\nvar _useState3=useState(true),_useState4=_slicedToArray(_useState3,2),loader=_useState4[0],setLoader=_useState4[1];//State for the ErrorMsg When Something Wrong In Fetching Api Data\nvar _useState5=useState(null),_useState6=_slicedToArray(_useState5,2),errorMsg=_useState6[0],setErrorMsg=_useState6[1];//Declaration of City Name\nvar city=\"Latur\";//Declaration of Country Name\nvar country=\"India\";//Declaration of Unit Name\nvar units=\"metric\";//Declaration of APi URL\nvar apiUrl=\"https://api.openweathermap.org/data/2.5/weather?q=\".concat(city,\",\").concat(country,\"&appid=\").concat(WEATHER_API_KEY,\"&units=\").concat(units);// // Used for All Clean up When Component is Unmounted  And mounted\n// useEffect(() => {\n//   let mounted = true;\n//   //Function For Getting Api Data And Setting in WeatherDetails State\n//   const fetchWeather = () => {\n//     axios\n//       .get(apiUrl)\n//       .then(function (response) {\n//         if (mounted) {\n//           setWeatherDetails(response);\n//           // console.log(response);\n//           setLoader(false);\n//         }\n//       })\n//       .catch(function (error) {\n//         // handle error\n//         //   console.log(error);\n//         setErrorMsg(\"Data Not Available\");\n//         setLoader(false);\n//       });\n//   };\n//   fetchWeather();\n//   return function cleanup() {\n//     mounted = false;\n//   };\n// }, []);\n//Checking Whether data Set or Not\n//   console.log(weatherDetails);\n// Returning Statement\nreturn/*#__PURE__*/_jsxs(\"div\",{className:\"app\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"text-center\",children:[\" \",errorMsg]}),loader?/*#__PURE__*/_jsxs(Fragment,{children:[/*#__PURE__*/_jsxs(\"div\",{style:{padding:\"200px\",color:\"red\",textAlign:\"center\"},children:[/*#__PURE__*/_jsx(CircularProgress,{color:\"secondary\"}),/*#__PURE__*/_jsx(\"h1\",{children:\"Loading Data Please wait...\"})]}),/*#__PURE__*/_jsx(\"div\",{style:{visibility:\"hidden\"},children:setTimeout(function(){setLoader(false);},1000)})]}):/*#__PURE__*/_jsx(Fragment,{children:weatherApiData&&/*#__PURE__*/_jsx(DisplayCard,{data:weatherApiData})})]});};export default WeatherApi;","map":{"version":3,"sources":["/home/v2stech/ReactJs/RouterAssignment (copy)/src/components/weatherapi/WeatherApi.js"],"names":["useEffect","useState","axios","DisplayCard","WEATHER_API_KEY","CircularProgress","useSelector","Fragment","WeatherApi","weatherApiData","state","weatherApiReducer","console","log","weatherDetails","setWeatherDetails","loader","setLoader","errorMsg","setErrorMsg","city","country","units","apiUrl","padding","color","textAlign","visibility","setTimeout"],"mappings":"oKAAA,OAASA,SAAT,CAAoBC,QAApB,KAAoC,OAApC,CACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,WAAP,KAAwB,eAAxB,CACA,OAASC,eAAT,KAAgC,4BAAhC,CACA,MAAOC,CAAAA,gBAAP,KAA6B,oCAA7B,CACA,OAASC,WAAT,KAA4B,aAA5B,CACA,OAASC,QAAT,KAAyB,OAAzB,C,wFACA,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,EAAM,CACvB,GAAMC,CAAAA,cAAc,CAAGH,WAAW,CAAC,SAACI,KAAD,QAAWA,CAAAA,KAAK,CAACC,iBAAjB,EAAD,CAAlC,CAEAC,OAAO,CAACC,GAAR,CAAYJ,cAAZ,CAA4B,cAA5B,EACAG,OAAO,CAACC,GAAR,CAAY,cAAZ,EAEA;AACA,cAA4CZ,QAAQ,CAAC,IAAD,CAApD,wCAAOa,cAAP,eAAuBC,iBAAvB,eACA;AACA,eAA4Bd,QAAQ,CAAC,IAAD,CAApC,yCAAOe,MAAP,eAAeC,SAAf,eACA;AACA,eAAgChB,QAAQ,CAAC,IAAD,CAAxC,yCAAOiB,QAAP,eAAiBC,WAAjB,eAEA;AACA,GAAIC,CAAAA,IAAI,CAAG,OAAX,CACA;AACA,GAAIC,CAAAA,OAAO,CAAG,OAAd,CACA;AACA,GAAIC,CAAAA,KAAK,CAAG,QAAZ,CACA;AACA,GAAIC,CAAAA,MAAM,6DAAwDH,IAAxD,aAAgEC,OAAhE,mBAAiFjB,eAAjF,mBAA0GkB,KAA1G,CAAV,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA,mBACE,aAAK,SAAS,CAAC,KAAf,wBACE,aAAK,SAAS,CAAC,aAAf,eAA+BJ,QAA/B,GADF,CAEGF,MAAM,cACL,MAAC,QAAD,yBACE,aACE,KAAK,CAAE,CACLQ,OAAO,CAAE,OADJ,CAELC,KAAK,CAAE,KAFF,CAGLC,SAAS,CAAE,QAHN,CADT,wBAOE,KAAC,gBAAD,EAAkB,KAAK,CAAC,WAAxB,EAPF,cAQE,mDARF,GADF,cAWE,YAAK,KAAK,CAAE,CAAEC,UAAU,CAAE,QAAd,CAAZ,UACGC,UAAU,CAAC,UAAM,CAChBX,SAAS,CAAC,KAAD,CAAT,CACD,CAFU,CAER,IAFQ,CADb,EAXF,GADK,cAmBL,KAAC,QAAD,WACGR,cAAc,eAAI,KAAC,WAAD,EAAa,IAAI,CAAEA,cAAnB,EADrB,EArBJ,GADF,CA4BD,CAlFD,CAoFA,cAAeD,CAAAA,UAAf","sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport DisplayCard from \"./DisplayCard\";\r\nimport { WEATHER_API_KEY } from \"../GlobalConstants/ApiKeys\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Fragment } from \"react\";\r\nconst WeatherApi = () => {\r\n  const weatherApiData = useSelector((state) => state.weatherApiReducer);\r\n\r\n  console.log(weatherApiData, \" api calling\");\r\n  console.log(\" api calling\");\r\n\r\n  //State For Storing Weather Api  data\r\n  const [weatherDetails, setWeatherDetails] = useState(null);\r\n  // State For the Loader Part\r\n  const [loader, setLoader] = useState(true);\r\n  //State for the ErrorMsg When Something Wrong In Fetching Api Data\r\n  const [errorMsg, setErrorMsg] = useState(null);\r\n\r\n  //Declaration of City Name\r\n  let city = \"Latur\";\r\n  //Declaration of Country Name\r\n  let country = \"India\";\r\n  //Declaration of Unit Name\r\n  let units = \"metric\";\r\n  //Declaration of APi URL\r\n  let apiUrl = `https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${WEATHER_API_KEY}&units=${units}`;\r\n\r\n  // // Used for All Clean up When Component is Unmounted  And mounted\r\n  // useEffect(() => {\r\n  //   let mounted = true;\r\n  //   //Function For Getting Api Data And Setting in WeatherDetails State\r\n  //   const fetchWeather = () => {\r\n  //     axios\r\n  //       .get(apiUrl)\r\n  //       .then(function (response) {\r\n  //         if (mounted) {\r\n  //           setWeatherDetails(response);\r\n  //           // console.log(response);\r\n  //           setLoader(false);\r\n  //         }\r\n  //       })\r\n  //       .catch(function (error) {\r\n  //         // handle error\r\n  //         //   console.log(error);\r\n  //         setErrorMsg(\"Data Not Available\");\r\n  //         setLoader(false);\r\n  //       });\r\n  //   };\r\n  //   fetchWeather();\r\n  //   return function cleanup() {\r\n  //     mounted = false;\r\n  //   };\r\n  // }, []);\r\n\r\n  //Checking Whether data Set or Not\r\n  //   console.log(weatherDetails);\r\n\r\n  // Returning Statement\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <div className=\"text-center\"> {errorMsg}</div>\r\n      {loader ? (\r\n        <Fragment>\r\n          <div\r\n            style={{\r\n              padding: \"200px\",\r\n              color: \"red\",\r\n              textAlign: \"center\",\r\n            }}\r\n          >\r\n            <CircularProgress color=\"secondary\" />\r\n            <h1>Loading Data Please wait...</h1>\r\n          </div>\r\n          <div style={{ visibility: \"hidden\" }}>\r\n            {setTimeout(() => {\r\n              setLoader(false);\r\n            }, 1000)}\r\n          </div>\r\n        </Fragment>\r\n      ) : (\r\n        <Fragment>\r\n          {weatherApiData && <DisplayCard data={weatherApiData} />}\r\n        </Fragment>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherApi;\r\n"]},"metadata":{},"sourceType":"module"}