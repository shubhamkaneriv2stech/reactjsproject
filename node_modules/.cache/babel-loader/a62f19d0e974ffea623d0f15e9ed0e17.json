{"ast":null,"code":"import _objectSpread from\"/home/v2stech/ReactJs/RouterAssignment (copy)/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import AddBoxIcon from\"@material-ui/icons/AddBox\";import IndeterminateCheckBoxIcon from\"@material-ui/icons/IndeterminateCheckBox\";import{blue}from\"@material-ui/core/colors\";import{OverlayTrigger,Tooltip}from\"react-bootstrap\";import{jsx as _jsx}from\"react/jsx-runtime\";export var COLUMNS=[{id:\"expander\",// Make sure it has an ID\nwidth:50,Cell:function Cell(_ref){var row=_ref.row,rows=_ref.rows,toggleRowExpanded=_ref.toggleRowExpanded;return/*#__PURE__*/_jsx(\"span\",_objectSpread(_objectSpread({},row.getToggleRowExpandedProps({onClick:function onClick(){//rows is find Which row is Expanded\nvar expandedRow=rows.find(function(row){return row.isExpanded;});if(expandedRow){var isSubItemOfRow=Boolean(expandedRow&&row.id===expandedRow.id);if(isSubItemOfRow){var expandedSubItem=expandedRow.subRows.find(function(subRow){return subRow.isExpanded;});if(expandedSubItem){var isClickedOnExpandedSubItem=expandedSubItem.id===row.id;console.log(isClickedOnExpandedSubItem);if(!isClickedOnExpandedSubItem){toggleRowExpanded(expandedSubItem.id,false);}}}else{toggleRowExpanded(expandedRow.id,false);}}row.toggleRowExpanded();}})),{},{children:row.isExpanded?/*#__PURE__*/_jsx(IndeterminateCheckBoxIcon,{style:{color:blue[500]}}):/*#__PURE__*/_jsx(AddBoxIcon,{style:{color:blue[500]}})}));}},{Header:\"Id\",accessor:\"id\",width:100,defaultCanSort:false,disableSortBy:true},{Header:\"User Id\",accessor:\"userId\",width:100,defaultCanSort:true,disableSortBy:true,StyleClass:\"text-left\"},{Header:\"title\",accessor:\"title\",width:400,defaultCanSort:true,StyleClass:\"text-left\",Cell:function Cell(_ref2){var row=_ref2.row;return/*#__PURE__*/_jsx(OverlayTrigger,{placement:\"top\",delay:{show:250,hide:400},overlay:function overlay(props){return/*#__PURE__*/_jsx(Tooltip,_objectSpread(_objectSpread({id:\"button-tooltip\"},props),{},{children:row.original.title}));},children:/*#__PURE__*/_jsx(\"div\",{className:\"ellipsis_class\",children:/*#__PURE__*/_jsx(\"p\",{children:row.original.title})})});},disableSortBy:true},{Header:\"body\",accessor:\"body\",width:400,defaultCanSort:true,StyleClass:\"text-left\",Cell:function Cell(_ref3){var row=_ref3.row;return/*#__PURE__*/_jsx(OverlayTrigger,{placement:\"top\",delay:{show:250,hide:400},overlay:function overlay(props){return/*#__PURE__*/_jsx(Tooltip,_objectSpread(_objectSpread({id:\"button-tooltip\"},props),{},{children:row.original.body}));},children:/*#__PURE__*/_jsx(\"div\",{className:\"ellipsis_class\",children:/*#__PURE__*/_jsx(\"p\",{children:row.original.body})})});},disableSortBy:true}];","map":{"version":3,"sources":["/home/v2stech/ReactJs/RouterAssignment (copy)/src/components/PostsManagement/Columns.js"],"names":["AddBoxIcon","IndeterminateCheckBoxIcon","blue","OverlayTrigger","Tooltip","COLUMNS","id","width","Cell","row","rows","toggleRowExpanded","getToggleRowExpandedProps","onClick","expandedRow","find","isExpanded","isSubItemOfRow","Boolean","expandedSubItem","subRows","subRow","isClickedOnExpandedSubItem","console","log","color","Header","accessor","defaultCanSort","disableSortBy","StyleClass","show","hide","props","original","title","body"],"mappings":"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","sourcesContent":["import AddBoxIcon from \"@material-ui/icons/AddBox\";\r\nimport IndeterminateCheckBoxIcon from \"@material-ui/icons/IndeterminateCheckBox\";\r\nimport { blue } from \"@material-ui/core/colors\";\r\nimport { OverlayTrigger, Tooltip } from \"react-bootstrap\";\r\nexport const COLUMNS = [\r\n  {\r\n    id: \"expander\", // Make sure it has an ID\r\n    width: 50,\r\n    Cell: ({ row, rows, toggleRowExpanded }) => {\r\n      return (\r\n        <span\r\n          {...row.getToggleRowExpandedProps({\r\n            onClick: () => {\r\n              //rows is find Which row is Expanded\r\n              const expandedRow = rows.find((row) => row.isExpanded);\r\n\r\n              if (expandedRow) {\r\n                const isSubItemOfRow = Boolean(\r\n                  expandedRow && row.id === expandedRow.id\r\n                );\r\n                if (isSubItemOfRow) {\r\n                  const expandedSubItem = expandedRow.subRows.find(\r\n                    (subRow) => subRow.isExpanded\r\n                  );\r\n                  if (expandedSubItem) {\r\n                    const isClickedOnExpandedSubItem =\r\n                      expandedSubItem.id === row.id;\r\n                    console.log(isClickedOnExpandedSubItem);\r\n                    if (!isClickedOnExpandedSubItem) {\r\n                      toggleRowExpanded(expandedSubItem.id, false);\r\n                    }\r\n                  }\r\n                } else {\r\n                  toggleRowExpanded(expandedRow.id, false);\r\n                }\r\n              }\r\n              row.toggleRowExpanded();\r\n            },\r\n          })}\r\n        >\r\n          {row.isExpanded ? (\r\n            <IndeterminateCheckBoxIcon style={{ color: blue[500] }} />\r\n          ) : (\r\n            <AddBoxIcon style={{ color: blue[500] }} />\r\n          )}\r\n        </span>\r\n      );\r\n    },\r\n  },\r\n  {\r\n    Header: \"Id\",\r\n    accessor: \"id\",\r\n    width: 100,\r\n    defaultCanSort: false,\r\n    disableSortBy: true,\r\n  },\r\n  {\r\n    Header: \"User Id\",\r\n    accessor: \"userId\",\r\n    width: 100,\r\n    defaultCanSort: true,\r\n    disableSortBy: true,\r\n    StyleClass: \"text-left\",\r\n  },\r\n  {\r\n    Header: \"title\",\r\n    accessor: \"title\",\r\n    width: 400,\r\n    defaultCanSort: true,\r\n    StyleClass: \"text-left\",\r\n\r\n    Cell: ({ row }) => (\r\n      <OverlayTrigger\r\n        placement=\"top\"\r\n        delay={{ show: 250, hide: 400 }}\r\n        overlay={(props) => (\r\n          <Tooltip id=\"button-tooltip\" {...props}>\r\n            {row.original.title}\r\n          </Tooltip>\r\n        )}\r\n      >\r\n        <div className=\"ellipsis_class\">\r\n          <p>{row.original.title}</p>\r\n        </div>\r\n      </OverlayTrigger>\r\n    ),\r\n    disableSortBy: true,\r\n  },\r\n  {\r\n    Header: \"body\",\r\n    accessor: \"body\",\r\n    width: 400,\r\n    defaultCanSort: true,\r\n    StyleClass: \"text-left\",\r\n\r\n    Cell: ({ row }) => (\r\n      <OverlayTrigger\r\n        placement=\"top\"\r\n        delay={{ show: 250, hide: 400 }}\r\n        overlay={(props) => (\r\n          <Tooltip id=\"button-tooltip\" {...props}>\r\n            {row.original.body}\r\n          </Tooltip>\r\n        )}\r\n      >\r\n        <div className=\"ellipsis_class\">\r\n          <p>{row.original.body}</p>\r\n        </div>\r\n      </OverlayTrigger>\r\n    ),\r\n    disableSortBy: true,\r\n  },\r\n];\r\n"]},"metadata":{},"sourceType":"module"}