{"ast":null,"code":"var _jsxFileName = \"/home/v2stech/ReactJs/RouterAssignment/src/components/weatherapi/WeatherApi.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport DisplayCard from \"./DisplayCard\";\nimport { WEATHER_API_KEY } from \"../GlobalConstants/ApiKeys\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst WeatherApi = () => {\n  _s();\n\n  //State For Storing Weather Api  data\n  const [weatherDetails, setWeatherDetails] = useState(null); // State For the Loader Part\n\n  const [loader, setLoader] = useState(true); //State for the ErrorMsg When Something Wrong In Fetching Api Data\n\n  const [errorMsg, setErrorMsg] = useState(null); //Declaration of City Name\n\n  let city = \"Latur\"; //Declaration of Country Name\n\n  let country = \"India\"; //Declaration of Unit Name\n\n  let units = \"metric\"; //Declaration of APi URL\n\n  let apiUrl = `https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${WEATHER_API_KEY}&units=${units}`; // Used for All Clean up When Component is Unmounted  And mounted\n\n  useEffect(() => {\n    let mounted = true; //Function For Getting Api Data And Setting in WeatherDetails State\n\n    const fetchWeather = () => {\n      axios.get(apiUrl).then(function (response) {\n        if (mounted) {\n          setWeatherDetails(response);\n          console.log(response);\n          setLoader(false);\n        }\n      }).catch(function (error) {\n        // handle error\n        console.log(error);\n        setErrorMsg(\"Data Not Available\");\n        setLoader(false);\n      });\n    };\n\n    fetchWeather();\n    return function cleanup() {\n      mounted = false;\n    };\n  }, []); //Checking Whether data Set or Not\n\n  console.log(weatherDetails); // Returning Statement\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center\",\n      children: [\" \", errorMsg]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), loader ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          padding: \"200px\",\n          color: \"red\",\n          textAlign: \"center\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(CircularProgress, {\n          color: \"secondary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Loading Data Please wait...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 21\n      }, this)\n    }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: weatherDetails && /*#__PURE__*/_jsxDEV(DisplayCard, {\n        data: weatherDetails\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 38\n      }, this)\n    }, void 0, false)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n};\n\n_s(WeatherApi, \"YSJ/HdpLhM1CVfTkXjtxqQn6b80=\");\n\n_c = WeatherApi;\nexport default WeatherApi;\n\nvar _c;\n\n$RefreshReg$(_c, \"WeatherApi\");","map":{"version":3,"sources":["/home/v2stech/ReactJs/RouterAssignment/src/components/weatherapi/WeatherApi.js"],"names":["useEffect","useState","axios","DisplayCard","WEATHER_API_KEY","CircularProgress","WeatherApi","weatherDetails","setWeatherDetails","loader","setLoader","errorMsg","setErrorMsg","city","country","units","apiUrl","mounted","fetchWeather","get","then","response","console","log","catch","error","cleanup","padding","color","textAlign"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAASC,eAAT,QAAgC,4BAAhC;AACA,OAAOC,gBAAP,MAA6B,oCAA7B;;;;AAEA,MAAMC,UAAU,GAAG,MAAM;AAAA;;AACrB;AACA,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCP,QAAQ,CAAC,IAAD,CAApD,CAFqB,CAGrB;;AACA,QAAM,CAACQ,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAAC,IAAD,CAApC,CAJqB,CAKrB;;AACA,QAAM,CAACU,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAAC,IAAD,CAAxC,CANqB,CAQrB;;AACA,MAAIY,IAAI,GAAG,OAAX,CATqB,CAUrB;;AACA,MAAIC,OAAO,GAAG,OAAd,CAXqB,CAYrB;;AACA,MAAIC,KAAK,GAAG,QAAZ,CAbqB,CAcrB;;AACA,MAAIC,MAAM,GAAI,qDAAoDH,IAAK,IAAGC,OAAQ,UAASV,eAAgB,UAASW,KAAM,EAA1H,CAfqB,CAiBrB;;AACAf,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIiB,OAAO,GAAG,IAAd,CADY,CAEZ;;AACA,UAAMC,YAAY,GAAG,MAAM;AACvBhB,MAAAA,KAAK,CACAiB,GADL,CACSH,MADT,EAEKI,IAFL,CAEU,UAAUC,QAAV,EAAoB;AACtB,YAAIJ,OAAJ,EAAa;AACTT,UAAAA,iBAAiB,CAACa,QAAD,CAAjB;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACAX,UAAAA,SAAS,CAAC,KAAD,CAAT;AACH;AACJ,OARL,EASKc,KATL,CASW,UAAUC,KAAV,EAAiB;AACpB;AACAH,QAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ;AACAb,QAAAA,WAAW,CAAC,oBAAD,CAAX;AACAF,QAAAA,SAAS,CAAC,KAAD,CAAT;AACH,OAdL;AAeH,KAhBD;;AAiBAQ,IAAAA,YAAY;AACZ,WAAO,SAASQ,OAAT,GAAmB;AACtBT,MAAAA,OAAO,GAAG,KAAV;AACH,KAFD;AAGH,GAxBQ,EAwBN,EAxBM,CAAT,CAlBqB,CA4CrB;;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAYhB,cAAZ,EA7CqB,CA+CrB;;AACA,sBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACI;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,sBAA+BI,QAA/B;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,EAEKF,MAAM,gBACH;AAAA,6BACI;AACI,QAAA,KAAK,EAAE;AACHkB,UAAAA,OAAO,EAAE,OADN;AAEHC,UAAAA,KAAK,EAAE,KAFJ;AAGHC,UAAAA,SAAS,EAAE;AAHR,SADX;AAAA,gCAOI,QAAC,gBAAD;AAAkB,UAAA,KAAK,EAAC;AAAxB;AAAA;AAAA;AAAA;AAAA,gBAPJ,eAQI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBARJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ,qBADG,gBAcH;AAAA,gBAAGtB,cAAc,iBAAI,QAAC,WAAD;AAAa,QAAA,IAAI,EAAEA;AAAnB;AAAA;AAAA;AAAA;AAAA;AAArB,qBAhBR;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAqBH,CArED;;GAAMD,U;;KAAAA,U;AAuEN,eAAeA,UAAf","sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport DisplayCard from \"./DisplayCard\";\r\nimport { WEATHER_API_KEY } from \"../GlobalConstants/ApiKeys\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n\r\nconst WeatherApi = () => {\r\n    //State For Storing Weather Api  data\r\n    const [weatherDetails, setWeatherDetails] = useState(null);\r\n    // State For the Loader Part\r\n    const [loader, setLoader] = useState(true);\r\n    //State for the ErrorMsg When Something Wrong In Fetching Api Data\r\n    const [errorMsg, setErrorMsg] = useState(null);\r\n\r\n    //Declaration of City Name\r\n    let city = \"Latur\";\r\n    //Declaration of Country Name\r\n    let country = \"India\";\r\n    //Declaration of Unit Name\r\n    let units = \"metric\";\r\n    //Declaration of APi URL\r\n    let apiUrl = `https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${WEATHER_API_KEY}&units=${units}`;\r\n\r\n    // Used for All Clean up When Component is Unmounted  And mounted\r\n    useEffect(() => {\r\n        let mounted = true;\r\n        //Function For Getting Api Data And Setting in WeatherDetails State\r\n        const fetchWeather = () => {\r\n            axios\r\n                .get(apiUrl)\r\n                .then(function (response) {\r\n                    if (mounted) {\r\n                        setWeatherDetails(response);\r\n                        console.log(response);\r\n                        setLoader(false);\r\n                    }\r\n                })\r\n                .catch(function (error) {\r\n                    // handle error\r\n                    console.log(error);\r\n                    setErrorMsg(\"Data Not Available\");\r\n                    setLoader(false);\r\n                });\r\n        };\r\n        fetchWeather();\r\n        return function cleanup() {\r\n            mounted = false;\r\n        };\r\n    }, []);\r\n\r\n    //Checking Whether data Set or Not\r\n    console.log(weatherDetails);\r\n\r\n    // Returning Statement\r\n    return (\r\n        <div className=\"app\">\r\n            <div className=\"text-center\"> {errorMsg}</div>\r\n            {loader ? (\r\n                <>\r\n                    <div\r\n                        style={{\r\n                            padding: \"200px\",\r\n                            color: \"red\",\r\n                            textAlign: \"center\",\r\n                        }}\r\n                    >\r\n                        <CircularProgress color=\"secondary\" />\r\n                        <h1>Loading Data Please wait...</h1>\r\n                    </div>\r\n                </>\r\n            ) : (\r\n                <>{weatherDetails && <DisplayCard data={weatherDetails} />}</>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default WeatherApi;\r\n"]},"metadata":{},"sourceType":"module"}