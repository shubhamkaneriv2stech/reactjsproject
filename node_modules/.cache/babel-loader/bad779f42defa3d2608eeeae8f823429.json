{"ast":null,"code":"var _jsxFileName = \"/home/v2stech/ReactJs/RouterAssignment/src/components/PostsManagement/Columns.js\";\nimport AddBoxIcon from \"@material-ui/icons/AddBox\";\nimport IndeterminateCheckBoxIcon from \"@material-ui/icons/IndeterminateCheckBox\";\nimport { blue } from \"@material-ui/core/colors\";\nimport { OverlayTrigger, Tooltip } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const COLUMNS = [{\n  id: \"expander\",\n  // Make sure it has an ID\n  // Header: ({ getToggleAllRowsExpandedProps, isAllRowsExpanded }) => (\n  //     <span {...getToggleAllRowsExpandedProps()}>\n  //         {isAllRowsExpanded ? \"ðŸ‘‡\" : \"ðŸ‘‰\"}\n  //     </span>\n  // ),\n  Cell: ({\n    row,\n    rows,\n    toggleRowExpanded\n  }) => {\n    return /*#__PURE__*/_jsxDEV(\"span\", { ...row.getToggleRowExpandedProps({\n        onClick: () => {\n          //rows is find Which row is Expanded\n          const expandedRow = rows.find(row => row.isExpanded);\n\n          if (expandedRow) {\n            const isSubItemOfRow = Boolean(expandedRow && row.id === expandedRow.id);\n\n            if (isSubItemOfRow) {\n              const expandedSubItem = expandedRow.subRows.find(subRow => subRow.isExpanded);\n\n              if (expandedSubItem) {\n                const isClickedOnExpandedSubItem = expandedSubItem.id === row.id;\n                console.log(isClickedOnExpandedSubItem);\n\n                if (!isClickedOnExpandedSubItem) {\n                  toggleRowExpanded(expandedSubItem.id, false);\n                }\n              }\n            } else {\n              toggleRowExpanded(expandedRow.id, false);\n            }\n          }\n\n          row.toggleRowExpanded();\n        }\n      }),\n      children: row.isExpanded ? /*#__PURE__*/_jsxDEV(IndeterminateCheckBoxIcon, {\n        style: {\n          color: blue[500]\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(AddBoxIcon, {\n        style: {\n          color: blue[500]\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 17\n    }, this);\n  }\n}, {\n  Header: \"Id\",\n  accessor: \"id\",\n  width: 100,\n  defaultCanSort: false,\n  disableSortBy: true\n}, {\n  Header: \"User Id\",\n  accessor: \"userId\",\n  width: 100,\n  defaultCanSort: true,\n  disableSortBy: true,\n  StyleClass: \"text-left\"\n}, {\n  Header: \"title\",\n  accessor: \"title\",\n  width: 400,\n  defaultCanSort: true,\n  StyleClass: \"text-left\",\n  Cell: ({\n    row\n  }) => /*#__PURE__*/_jsxDEV(OverlayTrigger, {\n    placement: \"top\",\n    delay: {\n      show: 250,\n      hide: 400\n    },\n    overlay: props => /*#__PURE__*/_jsxDEV(Tooltip, {\n      id: \"button-tooltip\",\n      ...props,\n      children: row.original.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 21\n    }, this),\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ellipsis_class\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: row.original.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 13\n  }, this),\n  disableSortBy: true\n}, {\n  Header: \"body\",\n  accessor: \"body\",\n  width: 400,\n  defaultCanSort: true,\n  StyleClass: \"text-left\",\n  Cell: ({\n    row\n  }) => /*#__PURE__*/_jsxDEV(OverlayTrigger, {\n    placement: \"top\",\n    delay: {\n      show: 250,\n      hide: 400\n    },\n    overlay: props => /*#__PURE__*/_jsxDEV(Tooltip, {\n      id: \"button-tooltip\",\n      ...props,\n      children: row.original.body\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 21\n    }, this),\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ellipsis_class\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: row.original.body\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 13\n  }, this),\n  disableSortBy: true\n}];","map":{"version":3,"sources":["/home/v2stech/ReactJs/RouterAssignment/src/components/PostsManagement/Columns.js"],"names":["AddBoxIcon","IndeterminateCheckBoxIcon","blue","OverlayTrigger","Tooltip","COLUMNS","id","Cell","row","rows","toggleRowExpanded","getToggleRowExpandedProps","onClick","expandedRow","find","isExpanded","isSubItemOfRow","Boolean","expandedSubItem","subRows","subRow","isClickedOnExpandedSubItem","console","log","color","Header","accessor","width","defaultCanSort","disableSortBy","StyleClass","show","hide","props","original","title","body"],"mappings":"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","sourcesContent":["import AddBoxIcon from \"@material-ui/icons/AddBox\";\r\nimport IndeterminateCheckBoxIcon from \"@material-ui/icons/IndeterminateCheckBox\";\r\nimport { blue } from \"@material-ui/core/colors\";\r\nimport { OverlayTrigger, Tooltip } from \"react-bootstrap\";\r\nexport const COLUMNS = [\r\n    {\r\n        id: \"expander\", // Make sure it has an ID\r\n        // Header: ({ getToggleAllRowsExpandedProps, isAllRowsExpanded }) => (\r\n        //     <span {...getToggleAllRowsExpandedProps()}>\r\n        //         {isAllRowsExpanded ? \"ðŸ‘‡\" : \"ðŸ‘‰\"}\r\n        //     </span>\r\n        // ),\r\n        Cell: ({ row, rows, toggleRowExpanded }) => {\r\n            return (\r\n                <span\r\n                    {...row.getToggleRowExpandedProps({\r\n                        onClick: () => {\r\n                            //rows is find Which row is Expanded\r\n                            const expandedRow = rows.find(\r\n                                (row) => row.isExpanded\r\n                            );\r\n\r\n                            if (expandedRow) {\r\n                                const isSubItemOfRow = Boolean(\r\n                                    expandedRow && row.id === expandedRow.id\r\n                                );\r\n                                if (isSubItemOfRow) {\r\n                                    const expandedSubItem =\r\n                                        expandedRow.subRows.find(\r\n                                            (subRow) => subRow.isExpanded\r\n                                        );\r\n                                    if (expandedSubItem) {\r\n                                        const isClickedOnExpandedSubItem =\r\n                                            expandedSubItem.id === row.id;\r\n                                        console.log(isClickedOnExpandedSubItem);\r\n                                        if (!isClickedOnExpandedSubItem) {\r\n                                            toggleRowExpanded(\r\n                                                expandedSubItem.id,\r\n                                                false\r\n                                            );\r\n                                        }\r\n                                    }\r\n                                } else {\r\n                                    toggleRowExpanded(expandedRow.id, false);\r\n                                }\r\n                            }\r\n                            row.toggleRowExpanded();\r\n                        },\r\n                    })}\r\n                >\r\n                    {row.isExpanded ? (\r\n                        <IndeterminateCheckBoxIcon\r\n                            style={{ color: blue[500] }}\r\n                        />\r\n                    ) : (\r\n                        <AddBoxIcon style={{ color: blue[500] }} />\r\n                    )}\r\n                </span>\r\n            );\r\n        },\r\n    },\r\n    {\r\n        Header: \"Id\",\r\n        accessor: \"id\",\r\n        width: 100,\r\n        defaultCanSort: false,\r\n        disableSortBy: true,\r\n    },\r\n    {\r\n        Header: \"User Id\",\r\n        accessor: \"userId\",\r\n        width: 100,\r\n        defaultCanSort: true,\r\n        disableSortBy: true,\r\n        StyleClass: \"text-left\",\r\n    },\r\n    {\r\n        Header: \"title\",\r\n        accessor: \"title\",\r\n        width: 400,\r\n        defaultCanSort: true,\r\n        StyleClass: \"text-left\",\r\n\r\n        Cell: ({ row }) => (\r\n            <OverlayTrigger\r\n                placement=\"top\"\r\n                delay={{ show: 250, hide: 400 }}\r\n                overlay={(props) => (\r\n                    <Tooltip id=\"button-tooltip\" {...props}>\r\n                        {row.original.title}\r\n                    </Tooltip>\r\n                )}\r\n            >\r\n                <div className=\"ellipsis_class\">\r\n                    <p>{row.original.title}</p>\r\n                </div>\r\n            </OverlayTrigger>\r\n        ),\r\n        disableSortBy: true,\r\n    },\r\n    {\r\n        Header: \"body\",\r\n        accessor: \"body\",\r\n        width: 400,\r\n        defaultCanSort: true,\r\n        StyleClass: \"text-left\",\r\n\r\n        Cell: ({ row }) => (\r\n            <OverlayTrigger\r\n                placement=\"top\"\r\n                delay={{ show: 250, hide: 400 }}\r\n                overlay={(props) => (\r\n                    <Tooltip id=\"button-tooltip\" {...props}>\r\n                        {row.original.body}\r\n                    </Tooltip>\r\n                )}\r\n            >\r\n                <div className=\"ellipsis_class\">\r\n                    <p>{row.original.body}</p>\r\n                </div>\r\n            </OverlayTrigger>\r\n        ),\r\n        disableSortBy: true,\r\n    },\r\n];\r\n"]},"metadata":{},"sourceType":"module"}