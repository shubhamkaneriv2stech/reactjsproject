{"ast":null,"code":"var _jsxFileName = \"/home/v2stech/ReactJs/RouterAssignment (copy)/src/components/FormValidation/FormValidation.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Form, Button, Container } from \"react-bootstrap\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { Fragment } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst validationSchema = Yup.object().shape({\n  firstName: Yup.string().min(2, \"*First Name must have at least 2 characters\").max(100, \"*First Name can't be longer than 100 characters\").required(\"*First Name is required\"),\n  lastName: Yup.string().min(2, \"*Last Name must have at least 2 characters\").max(100, \"*Last Name can't be longer than 100 characters\").required(\"*Last Name is required\"),\n  email: Yup.string().email(\"*Must be a valid email address\").max(100, \"*Email must be less than 100 characters\").required(\"*Email is required\")\n});\n\nconst FormValidation = () => {\n  _s();\n\n  const [details, setDetails] = useState([]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      fluid: true,\n      style: {\n        padding: \"30px\",\n        paddingTop: \"0px\",\n        paddingBottom: \"15px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Formik, {\n        initialValues: {\n          firstName: \"\",\n          lastName: \"\",\n          email: \"\"\n        },\n        validationSchema: validationSchema,\n        onSubmit: (values, {\n          setSubmitting,\n          resetForm\n        }) => {\n          // When button submits form and form is in the process of submitting, submit button is disabled\n          setSubmitting(true); // Simulate submitting to database, shows us values submitted, resets form\n\n          setTimeout(() => {\n            alert(\" Data is submitted successfully\");\n            console.log(values);\n            resetForm();\n            setSubmitting(false);\n            setDetails({ ...values\n            });\n          }, 1000);\n        },\n        children: ({\n          values,\n          errors,\n          touched,\n          handleChange,\n          handleBlur,\n          handleSubmit,\n          isSubmitting\n        }) => /*#__PURE__*/_jsxDEV(Form, {\n          onSubmit: handleSubmit,\n          className: \"mx-auto\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"firstName\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \" First name :\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"text\",\n              name: \"firstName\",\n              placeholder: \"First Name\",\n              onChange: handleChange,\n              onBlur: handleBlur,\n              value: values.firstName,\n              isInvalid: touched.firstName && errors.firstName,\n              isValid: touched.firstName && !errors.firstName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n              type: \"invalid\",\n              children: errors.firstName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"lastName\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \" Last name :\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"text\",\n              name: \"lastName\",\n              placeholder: \"Last Name\",\n              onChange: handleChange,\n              onBlur: handleBlur,\n              value: values.lastName,\n              isInvalid: touched.lastName && errors.lastName,\n              isValid: touched.lastName && !errors.lastName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n              type: \"invalid\",\n              children: errors.lastName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"email\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \" Email :\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"email\",\n              name: \"email\",\n              placeholder: \"Email\",\n              onChange: handleChange,\n              onBlur: handleBlur,\n              value: values.email,\n              isInvalid: touched.email && errors.email,\n              isValid: touched.email && !errors.email\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n              type: \"invalid\",\n              children: errors.email\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"primary\",\n            type: \"submit\",\n            disabled: isSubmitting,\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: console.log(\" deaytils\", details)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n\n_s(FormValidation, \"KTYkil72QRmc+k+rRt91HShcujc=\");\n\n_c = FormValidation;\nexport default FormValidation;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormValidation\");","map":{"version":3,"sources":["/home/v2stech/ReactJs/RouterAssignment (copy)/src/components/FormValidation/FormValidation.js"],"names":["React","useState","Form","Button","Container","Formik","Yup","Fragment","validationSchema","object","shape","firstName","string","min","max","required","lastName","email","FormValidation","details","setDetails","padding","paddingTop","paddingBottom","values","setSubmitting","resetForm","setTimeout","alert","console","log","errors","touched","handleChange","handleBlur","handleSubmit","isSubmitting"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,SAAvB,QAAwC,iBAAxC;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,SAASC,QAAT,QAAyB,OAAzB;;AAEA,MAAMC,gBAAgB,GAAGF,GAAG,CAACG,MAAJ,GAAaC,KAAb,CAAmB;AAC1CC,EAAAA,SAAS,EAAEL,GAAG,CAACM,MAAJ,GACRC,GADQ,CACJ,CADI,EACD,6CADC,EAERC,GAFQ,CAEJ,GAFI,EAEC,iDAFD,EAGRC,QAHQ,CAGC,yBAHD,CAD+B;AAK1CC,EAAAA,QAAQ,EAAEV,GAAG,CAACM,MAAJ,GACPC,GADO,CACH,CADG,EACA,4CADA,EAEPC,GAFO,CAEH,GAFG,EAEE,gDAFF,EAGPC,QAHO,CAGE,wBAHF,CALgC;AAS1CE,EAAAA,KAAK,EAAEX,GAAG,CAACM,MAAJ,GACJK,KADI,CACE,gCADF,EAEJH,GAFI,CAEA,GAFA,EAEK,yCAFL,EAGJC,QAHI,CAGK,oBAHL;AATmC,CAAnB,CAAzB;;AAcA,MAAMG,cAAc,GAAG,MAAM;AAAA;;AAC3B,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBnB,QAAQ,CAAC,EAAD,CAAtC;AACA,sBACE,QAAC,QAAD;AAAA,2BACE,QAAC,SAAD;AACE,MAAA,KAAK,MADP;AAEE,MAAA,KAAK,EAAE;AACLoB,QAAAA,OAAO,EAAE,MADJ;AAELC,QAAAA,UAAU,EAAE,KAFP;AAGLC,QAAAA,aAAa,EAAE;AAHV,OAFT;AAAA,8BAQE,QAAC,MAAD;AACE,QAAA,aAAa,EAAE;AACbZ,UAAAA,SAAS,EAAE,EADE;AAEbK,UAAAA,QAAQ,EAAE,EAFG;AAGbC,UAAAA,KAAK,EAAE;AAHM,SADjB;AAME,QAAA,gBAAgB,EAAET,gBANpB;AAOE,QAAA,QAAQ,EAAE,CAACgB,MAAD,EAAS;AAAEC,UAAAA,aAAF;AAAiBC,UAAAA;AAAjB,SAAT,KAA0C;AAClD;AACAD,UAAAA,aAAa,CAAC,IAAD,CAAb,CAFkD,CAIlD;;AACAE,UAAAA,UAAU,CAAC,MAAM;AACfC,YAAAA,KAAK,CAAC,iCAAD,CAAL;AACAC,YAAAA,OAAO,CAACC,GAAR,CAAYN,MAAZ;AAEAE,YAAAA,SAAS;AACTD,YAAAA,aAAa,CAAC,KAAD,CAAb;AACAL,YAAAA,UAAU,CAAC,EAAE,GAAGI;AAAL,aAAD,CAAV;AACD,WAPS,EAOP,IAPO,CAAV;AAQD,SApBH;AAAA,kBAsBG,CAAC;AACAA,UAAAA,MADA;AAEAO,UAAAA,MAFA;AAGAC,UAAAA,OAHA;AAIAC,UAAAA,YAJA;AAKAC,UAAAA,UALA;AAMAC,UAAAA,YANA;AAOAC,UAAAA;AAPA,SAAD,kBASC,QAAC,IAAD;AAAM,UAAA,QAAQ,EAAED,YAAhB;AAA8B,UAAA,SAAS,EAAC,SAAxC;AAAA,kCAEE,QAAC,IAAD,CAAM,KAAN;AAAY,YAAA,SAAS,EAAC,WAAtB;AAAA,oCACE,QAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE,QAAC,IAAD,CAAM,OAAN;AACE,cAAA,IAAI,EAAC,MADP;AAEE,cAAA,IAAI,EAAC,WAFP;AAGE,cAAA,WAAW,EAAC,YAHd;AAIE,cAAA,QAAQ,EAAEF,YAJZ;AAKE,cAAA,MAAM,EAAEC,UALV;AAME,cAAA,KAAK,EAAEV,MAAM,CAACb,SANhB;AAOE,cAAA,SAAS,EAAEqB,OAAO,CAACrB,SAAR,IAAqBoB,MAAM,CAACpB,SAPzC;AAQE,cAAA,OAAO,EAAEqB,OAAO,CAACrB,SAAR,IAAqB,CAACoB,MAAM,CAACpB;AARxC;AAAA;AAAA;AAAA;AAAA,oBAFF,eAaE,QAAC,IAAD,CAAM,OAAN,CAAc,QAAd;AAAuB,cAAA,IAAI,EAAC,SAA5B;AAAA,wBACGoB,MAAM,CAACpB;AADV;AAAA;AAAA;AAAA;AAAA,oBAbF;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF,eAoBE,QAAC,IAAD,CAAM,KAAN;AAAY,YAAA,SAAS,EAAC,UAAtB;AAAA,oCACE,QAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE,QAAC,IAAD,CAAM,OAAN;AACE,cAAA,IAAI,EAAC,MADP;AAEE,cAAA,IAAI,EAAC,UAFP;AAGE,cAAA,WAAW,EAAC,WAHd;AAIE,cAAA,QAAQ,EAAEsB,YAJZ;AAKE,cAAA,MAAM,EAAEC,UALV;AAME,cAAA,KAAK,EAAEV,MAAM,CAACR,QANhB;AAOE,cAAA,SAAS,EAAEgB,OAAO,CAAChB,QAAR,IAAoBe,MAAM,CAACf,QAPxC;AAQE,cAAA,OAAO,EAAEgB,OAAO,CAAChB,QAAR,IAAoB,CAACe,MAAM,CAACf;AARvC;AAAA;AAAA;AAAA;AAAA,oBAFF,eAYE,QAAC,IAAD,CAAM,OAAN,CAAc,QAAd;AAAuB,cAAA,IAAI,EAAC,SAA5B;AAAA,wBACGe,MAAM,CAACf;AADV;AAAA;AAAA;AAAA;AAAA,oBAZF;AAAA;AAAA;AAAA;AAAA;AAAA,kBApBF,eAqCE,QAAC,IAAD,CAAM,KAAN;AAAY,YAAA,SAAS,EAAC,OAAtB;AAAA,oCACE,QAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE,QAAC,IAAD,CAAM,OAAN;AACE,cAAA,IAAI,EAAC,OADP;AAEE,cAAA,IAAI,EAAC,OAFP;AAGE,cAAA,WAAW,EAAC,OAHd;AAIE,cAAA,QAAQ,EAAEiB,YAJZ;AAKE,cAAA,MAAM,EAAEC,UALV;AAME,cAAA,KAAK,EAAEV,MAAM,CAACP,KANhB;AAOE,cAAA,SAAS,EAAEe,OAAO,CAACf,KAAR,IAAiBc,MAAM,CAACd,KAPrC;AAQE,cAAA,OAAO,EAAEe,OAAO,CAACf,KAAR,IAAiB,CAACc,MAAM,CAACd;AARpC;AAAA;AAAA;AAAA;AAAA,oBAFF,eAYE,QAAC,IAAD,CAAM,OAAN,CAAc,QAAd;AAAuB,cAAA,IAAI,EAAC,SAA5B;AAAA,wBACGc,MAAM,CAACd;AADV;AAAA;AAAA;AAAA;AAAA,oBAZF;AAAA;AAAA;AAAA;AAAA;AAAA,kBArCF,eAuDE,QAAC,MAAD;AAAQ,YAAA,OAAO,EAAC,SAAhB;AAA0B,YAAA,IAAI,EAAC,QAA/B;AAAwC,YAAA,QAAQ,EAAEmB,YAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAvDF;AAAA;AAAA;AAAA;AAAA;AAAA;AA/BJ;AAAA;AAAA;AAAA;AAAA,cARF,eAoGE;AAAA,kBAAMP,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBX,OAAzB;AAAN;AAAA;AAAA;AAAA;AAAA,cApGF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AA0GD,CA5GD;;GAAMD,c;;KAAAA,c;AA8GN,eAAeA,cAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { Form, Button, Container } from \"react-bootstrap\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { Fragment } from \"react\";\n\nconst validationSchema = Yup.object().shape({\n  firstName: Yup.string()\n    .min(2, \"*First Name must have at least 2 characters\")\n    .max(100, \"*First Name can't be longer than 100 characters\")\n    .required(\"*First Name is required\"),\n  lastName: Yup.string()\n    .min(2, \"*Last Name must have at least 2 characters\")\n    .max(100, \"*Last Name can't be longer than 100 characters\")\n    .required(\"*Last Name is required\"),\n  email: Yup.string()\n    .email(\"*Must be a valid email address\")\n    .max(100, \"*Email must be less than 100 characters\")\n    .required(\"*Email is required\"),\n});\nconst FormValidation = () => {\n  const [details, setDetails] = useState([]);\n  return (\n    <Fragment>\n      <Container\n        fluid\n        style={{\n          padding: \"30px\",\n          paddingTop: \"0px\",\n          paddingBottom: \"15px\",\n        }}\n      >\n        <Formik\n          initialValues={{\n            firstName: \"\",\n            lastName: \"\",\n            email: \"\",\n          }}\n          validationSchema={validationSchema}\n          onSubmit={(values, { setSubmitting, resetForm }) => {\n            // When button submits form and form is in the process of submitting, submit button is disabled\n            setSubmitting(true);\n\n            // Simulate submitting to database, shows us values submitted, resets form\n            setTimeout(() => {\n              alert(\" Data is submitted successfully\");\n              console.log(values);\n\n              resetForm();\n              setSubmitting(false);\n              setDetails({ ...values });\n            }, 1000);\n          }}\n        >\n          {({\n            values,\n            errors,\n            touched,\n            handleChange,\n            handleBlur,\n            handleSubmit,\n            isSubmitting,\n          }) => (\n            <Form onSubmit={handleSubmit} className=\"mx-auto\">\n              {/*First Name input Field*/}\n              <Form.Group controlId=\"firstName\">\n                <Form.Label> First name :</Form.Label>\n                <Form.Control\n                  type=\"text\"\n                  name=\"firstName\"\n                  placeholder=\"First Name\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.firstName}\n                  isInvalid={touched.firstName && errors.firstName}\n                  isValid={touched.firstName && !errors.firstName}\n                />\n\n                <Form.Control.Feedback type=\"invalid\">\n                  {errors.firstName}\n                </Form.Control.Feedback>\n              </Form.Group>\n              {/*Last Name input Field*/}\n              <Form.Group controlId=\"lastName\">\n                <Form.Label> Last name :</Form.Label>\n                <Form.Control\n                  type=\"text\"\n                  name=\"lastName\"\n                  placeholder=\"Last Name\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.lastName}\n                  isInvalid={touched.lastName && errors.lastName}\n                  isValid={touched.lastName && !errors.lastName}\n                />\n                <Form.Control.Feedback type=\"invalid\">\n                  {errors.lastName}\n                </Form.Control.Feedback>\n              </Form.Group>\n              {/*Email input Field*/}\n              <Form.Group controlId=\"email\">\n                <Form.Label> Email :</Form.Label>\n                <Form.Control\n                  type=\"email\"\n                  name=\"email\"\n                  placeholder=\"Email\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.email}\n                  isInvalid={touched.email && errors.email}\n                  isValid={touched.email && !errors.email}\n                />\n                <Form.Control.Feedback type=\"invalid\">\n                  {errors.email}\n                </Form.Control.Feedback>\n              </Form.Group>\n\n              {/*Submit button that is disabled after button is clicked/form is in the process of submitting*/}\n              <Button variant=\"primary\" type=\"submit\" disabled={isSubmitting}>\n                Submit\n              </Button>\n            </Form>\n          )}\n        </Formik>\n        <div>{console.log(\" deaytils\", details)}</div>\n      </Container>\n    </Fragment>\n  );\n};\n\nexport default FormValidation;\n"]},"metadata":{},"sourceType":"module"}